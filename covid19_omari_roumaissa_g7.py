# -*- coding: utf-8 -*-
"""Covid19-OMARI_ROUMAISSA_G7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10xssmRAsu-S4LWFAHvFC7euVBpXXZDzR
"""

# import Modules
!pip install sqlalchemy 
import sqlite3
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

con = sqlite3.connect("/content/Covid19France.db")

# Set function as our sql_to_pandas

def sql_to_df(sql_query):

    # Use pandas to pass sql query using connection form SQLite3
    df = pd.read_sql(sql_query, con)

    # Show the resulting DataFrame
    return df

"""# **4.1- Requêtes SQL :**

# 1) Quelle est la région la plus touchée ?
"""

query ='''SELECT reg, SUM(hosp) as hosp
          FROM RegionAge 
          GROUP BY reg 
          ORDER BY hosp DESC'''


# Grab 
sql_to_df(query).head()

"""**On peut donc voir que la region la plus touchée (en terme d'hospitalisation covid19) est la Région 11 : L'ile de France**

# 2) Quelles sont les classes d'age les plus impactées par ce virus ?
"""

query ='''SELECT cl_age90, SUM(hosp) as hosp
          FROM RegionAge
          GROUP BY cl_age90
          ORDER BY hosp DESC'''

# Grab 
sql_to_df(query).head(10)

"""Les classes d'ages les plus impactés par ce virus sont donc celle supérieurs à 60 ans avec un grand nombre entre 79 et 89 ans .

# 3) Quels sont les jours de la semaine ou il y a le plus de cas ?
"""



import datetime

query ='''SELECT jour, hosp
          FROM RegionAge 
          ORDER BY hosp DESC'''

# Grab 
data = sql_to_df(query).head(10)
data['Day'] = ""
for i in range(len(data)):
  data['Day'][i] = datetime.datetime.strptime(data['jour'][i], '%Y-%m-%d').strftime('%A')
data

"""Les jours de la semaine où il y'a le plus de cas sont le  mardi, lundi et le  dimanche

# 4) Donner le top 10 des départements les plus touchés, les moins touchés ?
"""



query ='''SELECT dep, SUM(hosp) as hosp
          FROM DepSexe 
          GROUP BY dep 
          ORDER BY hosp DESC'''

sql_to_df(query).head(10)

"""Voici la Liste des 10 départements avec le plus de cas( en somme des hospitalisation covid19)"""

query ='''SELECT dep, SUM(hosp) as hosp
          FROM DepSexe 
          GROUP BY dep 
          ORDER BY hosp'''

sql_to_df(query).head(10)

"""Voici la Liste des 10 départements avec le moin de cas( en somme des hospitalisation covid19)

# 5) Donner le Top 5 des régions les plus touchées au mois de Mars ? Avril ? Mai ?
"""

query ='''SELECT reg, SUM(hosp) as hosp, jour
          FROM RegionAge
          WHERE jour BETWEEN '2020-03-01' AND '2020-03-31'
          GROUP BY reg
          ORDER BY hosp DESC'''

# Grab 

sql_to_df(query).head(5)

"""Au mois de Mars ce sont donc les regions 11, 44, 84, 32, 93 qui ont été le plus touchées 

"""

query ='''SELECT reg, SUM(hosp) as hosp, jour
          FROM RegionAge
          WHERE jour BETWEEN '2020-04-01' AND '2020-04-31'
          GROUP BY reg
          ORDER BY hosp DESC'''

# Grab 
sql_to_df(query).head(5)

"""Au mois d'Avril ce sont donc les regions 11, 44, 84, 32, 93 qui ont été le plus touchées"""

query ='''SELECT reg, SUM(hosp) as hosp, jour
          FROM RegionAge
          WHERE jour BETWEEN '2020-05-01' AND '2020-05-31'
          GROUP BY reg
          ORDER BY hosp DESC'''

# Grab 
sql_to_df(query).head(5)

"""Au mois de Mai ce sont donc les regions 11, 44, 84, 32, 93 qui ont été le plus touchées

# **4.2- Analyse Statistique:**

## 1) Visualiser par département le nombre de personnes atteints du Covid 19
"""

# Load data set des données des urgences et sos médecins
data_dep = pd.read_csv('/content/data/sursaud-covid19-hebdomadaire-2020-05-20-19h00.csv',sep=';')
data_dep.head()

cas_par_dep= data_dep.groupby('dep').sum().sort_values('Nbre_hospit_Corona', ascending = False)
cas_par_dep.head()

"""# **J'ai utilisé plusieurs types de graphiques pour visualiser par départements mais c'est le plot "bar" que je trouve le plus pertinent pourcette visualisation**"""

cas_par_dep.plot();



df_mean= data_dep.groupby('dep', as_index=False).sum().sort_values(['Nbre_hospit_Corona'], ascending=False)
df_mean

ax = sns.barplot(x="dep", y="Nbre_hospit_Corona", data=df_mean)

sns.pairplot(df_mean)

"""# **J'ai utilisé plusieurs types de graphiques pour visualiser par départements mais c'est le plot "bar" que je trouve le plus pertinent pourcette visualisation**"""

ax = df_mean.plot(kind = "bar")

ax = df_mean.plot(kind = "bar", figsize=(25,10))
ax.set_xlabel("départements", fontsize=16)
ax.set_title("distribution par départements", fontsize=16)

"""Visualisation avec les  données hospitaliaires  pour voir si les resultats concordent par rapport au classement"""

#Load des données hospitaliaires  pour voir si les resultats concordent par rapport au classement
data_hosp_dep = pd.read_csv('/content/data2/donnees-hospitalieres-covid19-2020-05-19-19h00.csv',sep=';')
data_hosp_dep.head()

df_distrub = data_hosp_dep.groupby('dep', as_index=False).sum().sort_values(['hosp'], ascending=False)
df_distrub

ax = df_distrub.plot(kind = "bar", figsize=(25,10))
ax.set_xlabel("départements", fontsize=16)
ax.set_title("distribution par départements ( Données hospitaliaires)", fontsize=16)

"""# **2) Visualiser par région le nombre de personnes atteints du Covid **"""

data_region = pd.read_csv('/content/data/sursaud-covid19-quotidien-2020-05-26-19h00-region.csv',sep=',')
data_region.head(100)

# count missing values
data_region.isnull().sum()

# remove rows with missing values
data_region.drop(data_region.loc[data_region.reg.isnull()].index, inplace=True)
data_region.isnull().sum()

df_distrub_region = data_region.groupby('reg', as_index=True).sum().sort_values(['nbre_hospit_corona'], ascending=False)
df_distrub_region

#Filtrer uniquement par region et nombre d'hospitalisation suite au covid19
region1=data_region[['reg', 'nbre_hospit_corona']]
region1

df_distrub_region1 = region1.groupby('reg', as_index=True).sum().sort_values(['nbre_hospit_corona'], ascending=False)
df_distrub_region1

ax = df_distrub_region1.plot(kind = "bar", figsize=(15,6))
ax.set_xlabel("Regions", fontsize=16)
ax.set_title("distribution par Région ( Données Urgences et SOS médecins)", fontsize=16)

"""# ** 3)Top 10 des départements ayant le plus de décès en France**"""

#Afin d'avoir le nombre de décès on utilise le fichier des données hospitaliaires contenant les info covid19 par departements :
data_dep_dc = pd.read_csv('/content/data2/donnees-hospitalieres-covid19-2020-05-19-19h00.csv',sep=';')
data_dep_dc.head(100)

df_distrub_dc_dep = data_dep_dc.groupby('dep', as_index=True).sum().sort_values(['dc'], ascending=False)
df_distrub_dc_dep

#Filtrer uniquement par departement et nombre de décès : 
dep_dc=data_dep_dc[['dep', 'dc']]
dep_dc

df_distrub_dc_dep = dep_dc.groupby('dep', as_index=True).sum().sort_values(['dc'], ascending=False)
df_distrub_dc_dep.head(10)

df_distrub_dc_dep=df_distrub_dc_dep.head(10)

ax = df_distrub_dc_dep.plot(kind = "bar", figsize=(20,7))
ax.set_xlabel("Departements", fontsize=16)
ax.set_title("distribution du TOP 10 des Departements ayant le plus de décès  ( Données Hospitaliaires relatives à l'epidémie covid)", fontsize=16)

ax = df_distrub_dc_dep.plot(kind = "bar", figsize=(20,7))
ax.set_xlabel("Departements", fontsize=16)
ax.set_title("distribution par Départements du nombre de Décès total  ( Données Hospitaliaires relatives à l'epidémie covid)", fontsize=16)

"""# **4) Qui sont les plus impactés par ce virus (Hommes/Femmes) ?
  Représenter par genre la répartition des personnes hospitalisées,en réanimation, retournées à domicile ou décédées. 
"""

#Afin d'avoir la repartition par genre on utilise d'abord le fichier des données hospitaliaires contenant les info covid19 par Region et par sexe afin d'avoir les info globale :
data_dep_sexe = pd.read_csv('/content/data2/donnees-hospitalieres-covid19-2020-05-19-19h00.csv',sep=';')
data_dep_sexe.head(100)

df_distrub_sex= data_dep_sexe.groupby('sexe', as_index=False).sum().sort_values(['hosp'], ascending=False)
df_distrub_sex

ax = df_distrub_sex.plot(kind = "bar", figsize=(20,7))
ax.set_xlabel("Sexe", fontsize=16)
ax.xaxis.set_ticklabels(['Total', 'Hommes', 'Femmes'])
        
ax.set_title("distribution par sexe  ( Données Hospitaliaires relatives à l'epidémie covid)", fontsize=16)

"""**Distrubutions des hospitalisations par genre ( hommes / femmes et total)** """

ax = sns.barplot(x = 'sexe', y= 'hosp', hue='hosp', data = df_distrub_sex)
ax.xaxis.set_ticklabels(['Total', 'Hommes', 'Femmes'])

"""le nombre d'hommes hospitalisés est supérieurs au nombre de femmes hospitalisées.
Ce sont donc les hommes qui sont les plus touchés par le virus , il se peut que d'autres facteurs entrent en jeux , mais pour cette analyse nous nous sommes uniquement basé sur le nombres , par genre , d'hospitalisations , de personnes en réanimations , de retours à domicile et de décès .

**Distribution des décès par genre ( hommes/femmes et total) :**
"""

ax = sns.barplot(x = 'sexe', y= 'dc', hue='dc', data = df_distrub_sex)
ax.xaxis.set_ticklabels(['Total', 'Hommes', 'Femmes'])

"""**Distribution des personnes en réanimation par genre ( hommes/femmes et total) :**"""

ax = sns.barplot(x = 'sexe', y= 'rea', hue='rea', data = df_distrub_sex)
ax.xaxis.set_ticklabels(['Total', 'Hommes', 'Femmes'])

"""**Distribution des personnes retournés au domicile après hospitalisation covid 19 par genre ( hommes/femmes et total) :**"""

ax = sns.barplot(x = 'sexe', y= 'rad', hue='rad', data = df_distrub_sex)
ax.xaxis.set_ticklabels(['Total', 'Hommes', 'Femmes'])

"""**Représentation de cette évolution sur un axe de temps : **"""

df = pd.read_csv('/content/data2/donnees-hospitalieres-covid19-2020-05-19-19h00.csv', sep=";", parse_dates=True, index_col=2)
df = df.query("sexe == 0")  # sum male/female
df.drop(columns=["sexe"], inplace=True)
df.sort_index(inplace=True)
df.head(100)

df_distrub_tot= df.groupby(["jour"], as_index=True).sum().sort_values(['hosp'], ascending=False)
df_distrub_tot

ax=sns.lineplot(data=df_distrub_tot, palette="tab10", linewidth=2.5)

"""On peut donc voir que les hospitalisations sont en baisse , ansi que le nombre de personnes en réanimation et egalement décèdés suites au covid19 au seins des hopitaux en France et le nombre de retour à domicile après une hospitalisation du au covid 19 est en hausse ce qui est plutot bon signe .

# **4.3- Visualisation Cartographique :**

# Représenter sur une Map par région et ensuite par département les indicateurs de cette liste :
* le nombre de patients hospitalisés,
* le nombre de personnes actuellement en réanimation ou soins intensifs,
* le nombre cumulé de personnes retournées à domicile,
* le nombre cumulé de personnes décédées.

( je n'ai pas très bien reussi cette partie...)
"""

!pip install geojson
import folium
import json
from folium.plugins import FastMarkerCluster

data_dep = pd.read_csv('/content/data/sursaud-covid19-hebdomadaire-2020-05-20-19h00.csv',sep=';')
data_dep.head()

df_mean= data_dep.groupby('dep', as_index=False).sum().sort_values(['Nbre_hospit_Corona'], ascending=False)
df_mean

coord_reg = json.load(open("/content/geoloc/regions.geojson"))

coordinates_reg = list(coord_reg['features'][0]['geometry']['coordinates'])
lat_reg = [coordinates_reg[0][i][0] for i in range(len(coordinates_reg[0]))]
lon_reg = [coordinates_reg[0][i][1] for i in range(len(coordinates_reg[0]))]

loc = set(zip(lon_reg, lat_reg))

map_reg = folium.Map(location = [lon_reg[0], lat_reg[0]], zoom_start=16)
FastMarkerCluster(data=loc).add_to(map_reg)

map_reg

coord_dep = json.load(open("/content/geoloc/departements.geojson"))

coordinates_dep = list(coord_dep['features'][0]['geometry']['coordinates'])
lat_dep = [coordinates_dep[0][i][0] for i in range(len(coordinates_dep[0]))]
lon_dep = [coordinates_dep[0][i][1] for i in range(len(coordinates_dep[0]))]

loc = set(zip(lon_dep, lat_dep))

map_dep = folium.Map(location = [lon_dep[0], lat_dep[0]], zoom_start=16)
FastMarkerCluster(data=loc).add_to(map_dep)

map_dep